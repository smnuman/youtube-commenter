use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

pub mod auth;
pub mod ai;

/// Comment model representing a YouTube comment
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Comment {
    /// YouTube video ID
    pub video_id: String,

    /// Comment ID
    pub comment_id: String,

    /// Author name
    pub author: String,

    /// Author channel ID
    pub author_channel_id: String,

    /// Comment text
    pub text: String,

    /// Number of likes
    pub like_count: i32,

    /// When the comment was published
    pub published_at: DateTime<Utc>,

    /// Replies to this comment
    pub replies: Vec<Reply>,

    /// Whether this comment has been replied to by the user
    pub replied_to: bool,

    /// Metadata for the comment
    pub metadata: HashMap<String, String>,
}

/// Reply model representing a reply to a YouTube comment
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Reply {
    /// Reply ID
    pub reply_id: String,

    /// Parent comment ID
    pub parent_id: String,

    /// Author name
    pub author: String,

    /// Author channel ID
    pub author_channel_id: String,

    /// Reply text
    pub text: String,

    /// Number of likes
    pub like_count: i32,

    /// When the reply was published
    pub published_at: DateTime<Utc>,

    /// Whether this reply was generated by AI
    pub ai_generated: bool,

    /// The AI model used to generate this reply, if applicable
    pub ai_model: Option<String>,

    /// Metadata for the reply
    pub metadata: HashMap<String, String>,
}

/// Interaction history record
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct InteractionRecord {
    /// Unique ID for this interaction
    pub id: String,

    /// The user who performed this interaction
    pub user_id: String,

    /// The video ID
    pub video_id: String,

    /// The comment ID
    pub comment_id: String,

    /// The reply ID, if this is a reply
    pub reply_id: Option<String>,

    /// The type of interaction
    pub interaction_type: InteractionType,

    /// When this interaction occurred
    pub timestamp: DateTime<Utc>,

    /// Additional data about the interaction
    pub data: HashMap<String, String>,
}

/// Types of interactions that can be recorded
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum InteractionType {
    /// A new comment was received
    CommentReceived,

    /// A reply was generated by AI
    ReplyGenerated,

    /// A reply was edited by the user
    ReplyEdited,

    /// A reply was posted to YouTube
    ReplyPosted,

    /// A comment or reply was viewed
    Viewed,

    /// Custom interaction type
    Custom(String),
}
